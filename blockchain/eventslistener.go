package blockchain

import (
	"strings"

	"math/big"

	"github.com/SmartMeshFoundation/raiden-network/abi"
	"github.com/SmartMeshFoundation/raiden-network/network/rpc"
	"github.com/SmartMeshFoundation/raiden-network/params"
	"github.com/SmartMeshFoundation/raiden-network/utils"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/log"
)

var eventTokenAddedId common.Hash
var eventChannelNewId common.Hash
var eventChannelDeletedId common.Hash
var eventChannelNewBalanceId common.Hash
var eventChannelClosedId common.Hash
var eventTransferUpdatedId common.Hash
var eventChannelSettledId common.Hash
var eventChannelSecretRevealedId common.Hash
var eventAddressRegisteredId common.Hash

type Eventer interface {
	Name() string
}
type Event struct {
	EventName       string
	BlockNumber     int64
	TxIndex         uint
	TxHash          common.Hash
	ContractAddress common.Address
}

func (this *Event) Name() string {
	return this.EventName
}
func initEventWithLog(el *types.Log, e *Event) {
	e.BlockNumber = int64(el.BlockNumber)
	e.TxIndex = el.TxIndex
	e.TxHash = el.TxHash
	e.ContractAddress = el.Address
}

type EventTokenAdded struct {
	Event
	TokenAddress          common.Address
	ChannelManagerAddress common.Address
}

func NewEventTokenAdded(el *types.Log) *EventTokenAdded {
	e := &EventTokenAdded{}
	e.EventName = params.NameTokenAdded
	if eventTokenAddedId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.RegistryABI))
		eventTokenAddedId = parsed.Events[e.EventName].Id()
	}
	if eventTokenAddedId != el.Topics[0] {
		log.Crit("NewEventTokenAdded with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.TokenAddress = common.BytesToAddress(el.Data[12:32])          //第一个32位是tokenaddress
	e.ChannelManagerAddress = common.BytesToAddress(el.Data[44:64]) //第二个是channelManagerAddress
	return e
}

type EventChannelNew struct {
	Event
	NettingChannelAddress common.Address
	Participant1          common.Address
	Participant2          common.Address
	SettleTimeout         int
}

func NewEventEventChannelNew(el *types.Log) *EventChannelNew {
	e := &EventChannelNew{}
	e.EventName = params.NameChannelNew
	if eventChannelNewId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.ChannelManagerContractABI))
		eventChannelNewId = parsed.Events[e.EventName].Id()
	}
	if eventChannelNewId != el.Topics[0] {
		log.Crit("NewEventEventChannelNew with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.NettingChannelAddress = common.BytesToAddress(el.Data[12:32]) //第一个32位是tokenaddress
	e.Participant1 = common.BytesToAddress(el.Data[44:64])          //第二个是channelManagerAddress
	e.Participant2 = common.BytesToAddress(el.Data[76:96])
	t := new(big.Int)
	t.SetBytes(el.Data[96:128])
	e.SettleTimeout = int(t.Int64())
	return e
}

type EventChannelDeleted struct {
	Event
	CallerAddress common.Address
	Partener      common.Address
}

func NewEventChannelDeleted(el *types.Log) *EventChannelDeleted {
	e := &EventChannelDeleted{}
	e.EventName = params.NameChannelDeleted
	if eventChannelDeletedId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.ChannelManagerContractABI))
		eventChannelDeletedId = parsed.Events[e.EventName].Id()
	}
	if eventChannelDeletedId != el.Topics[0] {
		log.Crit("NewEventEventChannelNew with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.CallerAddress = common.BytesToAddress(el.Data[12:32]) //第一个32位是tokenaddress
	e.Partener = common.BytesToAddress(el.Data[44:64])      //第二个是channelManagerAddress
	return e
}

type EventChannelNewBalance struct {
	Event
	TokenAddress       common.Address
	ParticipantAddress common.Address
	Balance            int64
}

func NewEventChannelNewBalance(el *types.Log) *EventChannelNewBalance {
	e := &EventChannelNewBalance{}
	e.EventName = params.NameChannelNewBalance
	if eventChannelNewBalanceId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.NettingChannelContractABI))
		eventChannelNewBalanceId = parsed.Events[e.EventName].Id()
	}
	if eventChannelNewBalanceId != el.Topics[0] {
		log.Crit("NewEventChannelNewBalance with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.TokenAddress = common.BytesToAddress(el.Data[12:32])       //第一个32位是tokenaddress
	e.ParticipantAddress = common.BytesToAddress(el.Data[44:64]) //第二个是channelManagerAddress
	t := new(big.Int)
	t.SetBytes(el.Data[64:96])
	e.Balance = int64(t.Int64())
	return e
}

//event ChannelClosed(address closing_address, uint block_number);
type EventChannelClosed struct {
	Event
	ClosingAddress common.Address
}

func NewEventChannelClosed(el *types.Log) *EventChannelClosed {
	e := &EventChannelClosed{}
	e.EventName = params.NameChannelClosed
	if eventChannelClosedId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.NettingChannelContractABI))
		eventChannelClosedId = parsed.Events[e.EventName].Id()
	}
	if eventChannelClosedId != el.Topics[0] {
		log.Crit("NewEventChannelClosed with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.ClosingAddress = common.BytesToAddress(el.Data[12:32]) //第一个32位是tokenaddress
	return e
}

//
//event TransferUpdated(address node_address, uint block_number);

type EventTransferUpdated struct {
	Event
	NodeAddress common.Address
}

func NewEventTransferUpdated(el *types.Log) *EventTransferUpdated {
	e := &EventTransferUpdated{}
	e.EventName = params.NameTransferUpdated
	if eventTransferUpdatedId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.NettingChannelContractABI))
		eventTransferUpdatedId = parsed.Events[e.EventName].Id()
	}
	if eventTransferUpdatedId != el.Topics[0] {
		log.Crit("NewEventTransferUpdatedd with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.NodeAddress = common.BytesToAddress(el.Data[12:32]) //第一个32位是tokenaddress
	return e
}

//event ChannelSettled(uint block_number);

type EventChannelSettled struct {
	Event
}

func NewEventChannelSettled(el *types.Log) *EventChannelSettled {
	e := &EventChannelSettled{}
	e.EventName = params.NameChannelSettled
	if eventChannelSettledId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.NettingChannelContractABI))
		eventChannelSettledId = parsed.Events[e.EventName].Id()
	}
	if eventChannelSettledId != el.Topics[0] {
		log.Crit("NewEventChannelSettledd with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	return e
}

//event ChannelSecretRevealed(bytes32 secret, address receiver_address);
type EventChannelSecretRevealed struct {
	Event
	Secret          common.Hash
	ReceiverAddress common.Address
}

func NewEventChannelSecretRevealed(el *types.Log) *EventChannelSecretRevealed {
	e := &EventChannelSecretRevealed{}
	e.EventName = params.NameChannelSecretRevealed
	if eventChannelSecretRevealedId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.NettingChannelContractABI))
		eventChannelSecretRevealedId = parsed.Events[e.EventName].Id()
	}
	if eventChannelSecretRevealedId != el.Topics[0] {
		log.Crit("NewEventChannelSecretRevealedd with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.Secret = common.BytesToHash(el.Data[:32]) //第一个32字节是secret,第二个是address
	e.ReceiverAddress = common.BytesToAddress(el.Data[44:64])
	return e
}

// event AddressRegistered(address indexed eth_address, string socket);

type EventAddressRegistered struct {
	Event
	EthAddress common.Address
	Socket     string
}

func NewEventAddressRegistered(el *types.Log) *EventAddressRegistered {
	e := &EventAddressRegistered{}
	e.EventName = params.NameAddressRegistered
	if eventAddressRegisteredId == utils.EmptyHash {
		//no error test,the abi is generated by abigen
		parsed, _ := abi.JSON(strings.NewReader(rpc.EndpointRegistryABI))
		eventAddressRegisteredId = parsed.Events[e.EventName].Id()
	}
	if eventAddressRegisteredId != el.Topics[0] {
		log.Crit("NewEventAddressRegisteredd with unknown log: ", el)
	}
	initEventWithLog(el, &e.Event)
	e.EthAddress = common.BytesToAddress(el.Topics[1][12:32]) //
	/* Data todo why is  first 32bytes empty?
		Data: ([]uint8) (len=96 cap=96) {
	            00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
	            00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 20  |............... |
	            00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
	            00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 12  |................|
	            00000040  31 37 32 2e 33 31 2e 37  30 2e 32 38 3a 34 30 30  |172.31.70.28:400|
	            00000050  30 31 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |01..............|
	        },
	*/
	//data第一个32字节是空的,什么含义?
	t := new(big.Int)
	t.SetBytes(el.Data[32:64])
	e.Socket = string(el.Data[64 : 64+int(t.Int64())])
	return e
}
func test() {
	ch := make(chan Eventer)
	ch <- NewEventEventChannelNew(nil)
}
